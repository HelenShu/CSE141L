ANDI 00000
ADDI 11110
MOV R1		#Mem address 30 in R1
LD R8 R0    #Lower byte; start of loop
ANDI 00000
ADD R0
ADDI 00001
MOV R0		#Add 1 to R0
LD R9 R0	#Upper byte
LD R2 R0
SHL R2 101
ANDI 00000
ADD R2
MOV R7		#b11-b9 in position
ANDI 00000
ADD R8
MOV R2		#Moves lower byte to R2
SHR R2 100
SHL R2 001	#Shifts b8-b5 in position
ANDI 00000
ADD R7
ADD R2
MOV R7		#b8-b5 in position
ANDI 00000
ADD R8
ANDI 00001
MOV R2		#And R2, R8, 1
SHL R2 011
ANDI 00000
ADD R2
MOV R6		#b1 in position
ANDI 00000
ADD R8
ANDI 01110
MOV R2		#And R2, R8, 0x0D
SHL R2 100
ANDI 00000
ADD R6
ADD R2
MOV R6		#Add R9, R9, R2 @b4-b2 in position
ANDI 00000
ADD R8
ANDI 00001
MOV R2		#And R2, R8, 1 @b1; parity_1
ANDI 00000
ADD R8
ANDI 00010
MOV R3		#And R3, R8, 2
SHR R3 001
ANDI 00000
ADD R2
XOR R3
MOV R2		#Xor R2, R2, R3 @b1, b2
ANDI 00000
ADD R8
ANDI 01000
MOV R3		#And R3, R8, 8
SHR R3 011
ANDI 00000
ADD R2
XOR R3
MOV R2 		#Xor R2, R2, R3 @b1, b2, b4
ANDI 00000
ADD R8
ANDI 10000
MOV R3		#And R3, R8, 16
SHR R3 100
ANDI 00000
ADD R2
XOR R3
MOV R2		#Xor R2, R2, R3 @b1, b2, b4, b5
ANDI 00000	
ADDI 00001
MOV  R3
SHL  R3 110
ANDI 00000
ADD R8
AND R3
MOV R3		#And R3, R8, 64
SHR R3 110
ANDI 00000
ADD R2
XOR R3
MOV R2		#Xor R2, R2, R3 @b1, b2, b4, b5, b7
ANDI 00000
ADD R9
ANDI 00001
MOV  R3		#And R3, R9, 1
ANDI 00000
ADD R2
XOR R3
MOV R2		#Xor R2, R2, R3 @b1, b2, b4, b5, b7, b9
ANDI 00000
ADD R9
ANDI 00100
MOV R3		#And R4, R9, 4
SHR R3 010
ANDI 00000
ADD R2
XOR R3
MOV R2		#Xor R2, R2, R3 @parity bit 1
SHL R2 001
ANDI 00000
ADD R6
ADD R2
MOV R6		#Moves p1 into position @Add R6, R2, R6, where R6 was 0
ANDI 00000
ADD R8
ANDI 00001
MOV R2		#And R2, R8, 1 @b1; parity_2
ANDI 00000
ADD R8
ANDI 00100
MOV R3		#And R3, R8, 4
SHR R3 010
ANDI 00000
ADD R2
XOR R3
MOV R2		#Xor R2, R2, R3 @b1, b3
ANDI 00000
ADD R8
ANDI 01000
MOV R3		#And R3, R8, 8
SHR R3 011
ANDI 00000
ADD R2
XOR R3
MOV R2		#Xor R2, R2, R3 @b1, b2, b4
ANDI 00000  #Clear accumulator
ADDI 00001
MOV R3
SHL R3 101
ANDI 00000
ADD R8
AND R3
MOV R3      #And R3, R8, 32
SHR R3 101
ANDI 00000
ADD R2
XOR R3
MOV R2      #Xor R2, R2, R3 @b1, b2, b4, b6
ANDI 00000
ADDI 00001
MOV R3
SHL R3 110
ANDI 00000
ADD R8
AND R3
MOV R3      #And R3, R8, 64
SHR R3 110
ANDI 00000
ADD R2
XOR R3
MOV R2      #Xor R2, R2, R3 @b1, b2, b4, b5, b7
ANDI 00000
ADD R9
ANDI 00010
MOV R3      #And R3, R9, 2
SHR R3 001
ANDI 00000
ADD R2
XOR R3
MOV R2      #Xor R2, R2, R3 @b1, b2, b4, b5, b7, b10
ANDI 00000
ADD R9
ANDI 00100
MOV R3      #And R3, R9, 4
SHR R3 010
ANDI 00000
ADD R2
XOR R3
MOV R2      #Xor R2, R2, R3 @parity bit 2
SHL R2 010
ANDI 00000
ADD R6
ADD R2
MOV R6      #Add R6, R6, R2; parity bit 2 in position
ANDI 00000
ADD R8
ANDI 00010
MOV R2      #And R2, R8, 2 @parity_4
SHR R2 001 #Shift Right R2, 1 @b2
ANDI 00000
ADD R8
ANDI 00100
MOV R3      #And R3, R8, 4
SHR R3 010
ANDI 00000
ADD R2
XOR R3
MOV R2      #Xor R2, R2, R3 @b2, b3
ANDI 00000
ADD R8
ANDI 01000
MOV R3      #And R3, R8, 8
SHR R3 011
ANDI 00000
ADD R2
XOR R3
MOV R2      #Xor R2, R2, R3 @b2, b3, b4
ANDI 00000
ADDI 00001
MOV R3
SHL R3 111
ANDI 00000
ADD R8
AND R3
MOV R3      #And R3, R8, 128
SHR R3 111
ANDI 00000
ADD R2
XOR R3
MOV R2      #Xor R2, R2, R3 @b2, b3, b4, b8
ANDI 00000
ADD R9
ANDI 00001
MOV R3      #And R3, R9, 1
ANDI 00000
ADD R2
XOR R3
MOV R2      #Xor R2, R2, R3 @b2, b3, b4, b8, b9
ANDI 00000
ADD R9
ANDI 00010
MOV R3      #And R3, R9, 2
SHR R3 001
ANDI 00000
ADD R2
XOR R3
MOV R2      #Xor R2, R2, R3 @b2, b3, b4, b8, b9, b10
ANDI 00000
ADD R9
ANDI 00100
MOV R3      #And R3, R9, 4
SHR R3 010
ANDI 00000
ADD R2
XOR R3
MOV R2      #Xor R2, R2, R3 @parity bit 4
SHL R2 100
ANDI 00000
ADD R6
ADD R2
MOV R6      #parity bit 4 in position
ANDI 00000
ADD R8
ANDI 10000
MOV R2      #And R2, R8, 16 @parity_8
SHR R2 100  @b5
ANDI 00000
ADDI 00001
MOV R3
SHL R3 101
ANDI 00000
ADD R8
AND R3
MOV R3      #And R3, R8, 32
SHR R3 101
ANDI 00000
ADD R2
XOR R3
MOV R2      #Xor R2, R2, R3 @b5, b6
ANDI 00000
ADDI 00001
MOV R3
SHL R3 110
ANDI 00000
ADD R8
AND R3
MOV R3      #And R3, R8, 64
SHR R3 110
ANDI 00000
ADD R2
XOR R3
MOV R2      #Xor R3, R3, R4 @b5, b6, b7
ANDI 00000
ADDI 00001
MOV R3
SHL R3 111
ANDI 00000
ADD R8
AND R3
MOV R3      #And R3, R8, 128
SHR R3 111
ANDI 00000
ADD R2
XOR R3
MOV R2      #Xor R2, R2, R3 @b5, b6, b7, b8
ANDI 00000
ADD R9
ANDI 00001
MOV R3      #And R3, R9, 1
ANDI 00000
ADD R2
XOR R3
MOV R2      #Xor R2, R2, R3 @b5, b6, b7, b8, b9
ANDI 00000
ADD R9
ANDI 00010
MOV R3      #And R3, R9, 2
SHR R3 001
ANDI 00000
ADD R2
XOR R3
MOV R2      #Xor R2, R2, R3 @b5, b6, b7, b8, b9, b10
ANDI 00000
ADD R9
ANDI 00100
MOV R3      #And R3, R9, 4
SHR R3 010
ANDI 00000
ADD R2
XOR R3
MOV R2      #Xor R3, R3, R4 @parity bit 8
ANDI 00000
ADD R7
ADD R2
MOV R7      #Add R7, R7, R2 @parity bit 8 in position
ANDI 00000
ADD R6
ANDI 00010
MOV R2      #And R2, R6, 2 @parity_16
SHR R2 001  @p1
ANDI 00000
ADD R6
ANDI 00100
MOV R3      #And R3, R6, 4
SHR R3 010
ANDI 00000
ADD R2
XOR R3
MOV R2      #Xor R2, R2, R3 @p1, p2
ANDI 00000
ADD R6
ANDI 01000
MOV R3      #And R3, R6, 8
SHR R3 011
ANDI 00000
ADD R2
XOR R3
MOV R2      #Xor R2, R2, R3 @p1, p2, b1
ANDI 00000
ADD R6
ANDI 10000
MOV R3      #And R3, R6, 16
SHR R3 100
ANDI 00000
ADD R2
XOR R3
MOV R2      #Xor R2, R2, R3 @p1, p2, b1, p4
ANDI 00000
ADDI 00001
MOV R3
SHL R3 101
ANDI 00000
ADD R6
AND R3
MOV R3      #And R3, R6, 32
SHR R3 101
ANDI 00000
ADD R2
XOR R3
MOV R2      #Xor R2, R2, R3 @p1, p2, b1, p4, b2
ANDI 00000
ADDI 00001
MOV R3
SHL R3 110
ANDI 00000
ADD R6
AND R3
MOV R3      #And R3, R6, 64
SHR R3 110
ANDI 00000
ADD R2
XOR R3
MOV R2      #Xor R2, R2, R3 @p1, p2, b1, p4, b2, b3
ANDI 00000
ADDI 00001
MOV R3
SHL R3 111
ANDI 00000
ADD R6
AND R3
MOV R3      #And R3, R6, 128
SHR R3 111
ANDI 00000
ADD R2
XOR R3
MOV R2      Xor R3, R3, R4 @p1, p2, b1, p4, b2, b3, b4
ANDI 00000
ADD R7
ANDI 00001
MOV R3      #And R3, R7, 1
ANDI 00000
ADD R2
XOR R3
MOV R2      #Xor R2, R2, R3 @p1, p2, b1, p4, b2, b3, b4, p8
ANDI 00000
ADD R7
ANDI 00010
MOV R3      #And R3, R7, 2
SHR R3 001
ANDI 00000
ADD R2
XOR R3
MOV R2      #Xor R2, R2, R3 @p1, p2, b1, p4, b2, b3, b4, p8, b5
ANDI 00000
ADD R7
ANDI 00100
MOV R3      #And R3, R7, 4
SHR R3 010
ANDI 00000
ADD R2
XOR R3
MOV R2      #Xor R2, R2, R3 @p1, p2, b1, p4, b2, b3, b4, p8, b5, b6
ANDI 00000
ADD R7
ANDI 01000
MOV R3      #And R3, R7, 8
SHR R3 011
ANDI 00000
ADD R2
XOR R3
MOV R2      #Xor R2, R2, R3 @p1, p2, b1, p4, b2, b3, b4, p8, b5, b6, b7
ANDI 00000
ADD R7
ANDI 10000
MOV R3      #And R3, R7, 16
SHR R3 100
ANDI 00000
ADD R2
XOR R3
MOV R2      #Xor R2, R2, R3 @p1, p2, b1, p4, b2, b3, b4, p8, b5, b6, b7, b8
ANDI 00000
ADDI 00001
MOV R3
SHL R3 101
ANDI 00000
ADD R7
AND R3
MOV R3      #And R3, R7, 32
SHR R3 101
ANDI 00000
ADD R2
XOR R3
MOV R2      #Xor R2, R2, R3 @p1, p2, b1, p4, b2, b3, b4, p8, b5, b6, b7, b8, b9
ANDI 00000
ADDI 00001
MOV R3
SHL R3 110
ANDI 00000
ADD R7
AND R3
MOV R3      #And R3, R7, 64
SHR R3 110
ANDI 00000
ADD R2
XOR R3
MOV R2      #Xor R2, R2, R3 @p1, p2, b1, p4, b2, b3, b4, p8, b5, b6, b7, b8, b9, b10
ANDI 00000
ADDI 00001
MOV R3
SHL R3 111
ANDI 00000
ADD R7
AND R3
MOV R3      #And R3, R7, 128
SHR R3 111
ANDI 00000
ADD R2
XOR R3
MOV R2      #Xor R2, R2, R3 @p1, p2, b1, p4, b2, b3, b4, p8, b5, b6, b7, b8, b9, b10, b11
ANDI 00000
ADD R6
ADD R2
MOV R6     #Add R7, R7, R2 #parity bit 16 set
STR R6 R1   #Store R6, [0]R1
ANDI 00000
ADD R1
ADDI 00001
MOV R1
STR R7 R1    #Store R7, [1]R1
ANDI 00000
ADDI 11101
MOV R3
CMP R0 R3    #Cmp R0, 29
BRE 00001       #Beq 00001	#End
ANDI 00000
ADD R0
ADDI 00001
MOV R0      #Add R0, R0, 1
ANDI 00000
ADD R1
ADDI 00001
MOV R1      #Add R1, R1, 1
ANDI 00000	#Clear registers
MOV R2
MOV R3
MOV R4
MOV R5
MOV R6
MOV R7
J 00000  
ANDI 00000	#End; set done flag to 1; probably manually in code somewhere
ANDI 00000	#Instructions used to transition to program 2