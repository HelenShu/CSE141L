ADDI 11111
ADDI 11111
ADDI 00010
MOV R0      #Addi R0, R0, 64
ADDI 11101
MOV R10	    #Store 93 in R10
ADDI 00001
MOV R1      #Addi R1, R1, 94
LD R8 R0    #load R8, 0[R0]    #Loop
ANDI 00000
ADD R0
ADDI 00001
MOV R0
LD R9 R0    #load R9, 1[R0]
ANDI 00000  @parity_1 calculation
ADD R8     
ANDI 01000
MOV R2      #And R2, R8, 8
SHR R2 011
ANDI 00000
ADD R2	    @b1
ANDI 00000
ADDI 00001
MOV R3
SHR R3 101
ANDI 00000
ADD R8
AND R3
MOV R3      #And R3, R8, 32
SHR R3 101
ANDI 00000
ADD R2
XOR R3
MOV R2      #Xor R2, R2, R3 @b1, b2
ANDI 00000
ADDI 00001
MOV R3
SHL R3 111
ANDI 00000
ADD R8
AND R3
MOV R3      #And R3, R8, 128
SHR R3 111
ANDI 00000
ADD R2
XOR R3
MOV R2     #Xor R2, R3, R2 @b1, b2, b4
ANDI 00000
ADD R9
ANDI 00010
MOV R3      #And R3, R9, 2
SHR R3 001
ANDI 00000
ADD R2
XOR R3
MOV R2      #Xor R2, R3, R2 @b1, b2, b4, b5
ANDI 00000
ADD R9
ANDI 01000
MOV R3      #And R3, R9, 8
SHR R3 011
ANDI 00000
ADD R2
XOR R3
MOV R2      #Xor R2, R3, R2 @b1, b2, b4, b5, b7
ANDI 00000
ADDI 00001
MOV R3
SHL R3 101
ANDI 00000
ADD R9
AND R3
MOV R3      #And R3, R9, 32
SHR R3 101
ANDI 00000
ADD R2
XOR R3
MOV R2      #Xor R2, R2, R3 @b1, b2, b4, b5, b7, b9
ANDI 00000
ADDI 00001
MOV R3
SHL R3 111
ANDI 00000
ADD R9
AND R3
MOV R3      #And R3, R9, 128
SHR R3 111
ANDI 00000
ADD R2
XOR R3
MOV R5      #Xor R5, R2, R3 @calculated parity bit 1
ANDI 00000
ADD R8
ANDI 00010
MOV R2      #And R2, R8, 2  @get parity bit 1
SHR R2 001
ANDI 00000
ADD R5
XOR R2
MOV R5      #Xor R5, R5, R2 @If are equal, R2 is 0; else is 1 -> error
ANDI 00000
ADD R8
ANDI 01000
MOV R2      #And R2, R8, 8 @parity_2
SHR R2 011  @b1
ANDI 00000
ADDI 00001
MOV R3
SHL R3 110
ANDI 00000
ADD R8
AND R3
MOV R3      #And R3, R8, 64
SHR R3 110
ANDI 00000
ADD R2
XOR R3
MOV R2      #Xor R2, R2, R3 @b1, b3
ANDI 00000
ADDI 00001
MOV R3
SHL R3 111
ANDI 00000
ADD R8
AND R3
MOV R3      #And R3, R8, 128
SHR R3 111
ANDI 00000
ADD R2
XOR R3
MOV R2      #Xor R2, R2, R3 @b1, b3, b4
ANDI 00000
ADD R9
ANDI 00100
MOV R3      #And R3, R9, 4
SHR R3 010
ANDI 00000
ADD R2
XOR R3
MOV R2      #Xor R2, R2, R3 @b1, b3, b4, b6
ANDI 00000
ADD R9
ANDI 01000
MOV R3      #And R3, R9, 8
SHR R3 011
ANDI 00000
ADD R2
XOR R3
MOV R2      #Xor R2, R2, R3 @b1, b3, b4, b6, b7
ANDI 00000
ADDI 00001
MOV R3
SHL R3 110
ANDI 00000
ADD R9
AND R3
MOV R3      #And R3, R9, 64
SHR R3 110
ANDI 00000
ADD R2
XOR R3
MOV R2      @Xor R2, R2, R3 @b1, b3, b4, b6, b7, b10
ANDI 00000
ADDI 00001
MOV R3
SHL R3 111
ANDI 00000
ADD R9
AND R3
MOV R3      #And R3, R9, 128
SHR R3 111
ANDI 00000
ADD R2
XOR R3
MOV R2      #Xor R2, R2, R3 @calculated parity bit 2
SHL R2 001
ANDI 00000
ADD R8
ANDI 00100
MOV R3      #And R3, R8, 4 @get parity bit 2
SHR R3 001
ANDI 00000
ADD R2
XOR R3
MOV R2      #Xor R2, R2, R3
ANDI 00000
ADD R5
ADD R2
MOV R5      #Add R5, R5, R2 @Move result into R5
ANDI 00000
ADDI 00001
MOV R2
SHL R2 101
ANDI 00000
ADD R8
AND R2
MOV R2      #And R2, R8, 32 @Parity bit 4
SHR R2 101  @b2
ANDI 00000
ADDI 00001
MOV R3
SHL R3 110
ANDI 00000
ADD R8
AND R3
MOV R3  #And R3, R8, 64
SHR R3 110
ANDI 00000
ADD R2
XOR R3
MOV R2      #Xor R2, R2, R3 @b2, b3
ANDI 00000
ADDI 00001
MOV R3
SHL R3 111
ANDI 00000
ADD R8
AND R3
MOV R3      #And R3, R8, 128
SHR R3 111
ANDI 00000
ADD R2
XOR R3
MOV R2      #Xor R2, R2, R3 @b2, b3, b4
ANDI 00000
ADD R9
ANDI 10000
MOV R3      #And R3, R9, 16
SHR R3 100
ANDI 00000
ADD R2
XOR R3
MOV R2      @Xor R2, R2, R3 @b2, b3, b4, b8
ANDI 00000
ADDI 00001
MOV R3
SHL R3 101
ANDI 00000
ADD R9
AND R3
MOV R3      #And R3, R9, 32
SHR R3 101
ANDI 00000
ADD R2
XOR R3
MOV R2      #Xor R2, R2, R3 @b2, b3, b4, b8, b9
ANDI 00000
ADDI 00001
MOV R3
SHL R3 110
ANDI 00000
ADD R9
AND R3
MOV R3      #And R3, R9, 64
SHR R3 110
ANDI 00000
ADD R2
XOR R3
MOV R2      #Xor R2, R2, R3 @b2, b3, b4, b8, b9, b10
ANDI 00000
ADDI 00001
MOV R3
SHL R3 111
ANDI 00000
ADD R9
AND R3
MOV R3      #And R3, R9, 128
SHR R3 111
ANDI 00000
ADD R2
XOR R3
MOV R2      #Xor R2, R2, R3 @calculated parity bit 4
ANDI 00000
ADD R8
ANDI 10000
MOV R3      #And R3, R8, 16 @get parity bit 4
SHR R3 100
ANDI 00000
ADD R2
XOR R3
MOV R2      #Xor R2, R2, R3
SHL R2 010
ANDI 00000
ADD R5
ADD R2
MOV R5      #Add R5, R5, R2 @Move result into R5
ANDI 00000
ADD R9
ANDI 00010
MOV R2      #And R2, R9, 1 @Parity bit 8 calculation
SHR R2 001  #Shift Right R2, 1 @b5
ANDI 00000
ADD R9
ANDI 00100
MOV R3      #And R3, R9, 4
SHR R3 010
ANDI 00000
ADD R2
XOR R3
MOV R2      #Xor R2, R2, R3 @b5, b6
ANDI 00000
ADD R9
ANDI 01000
MOV R3      #And R3, R9, 8
SHR R3 011
ANDI 00000
ADD R2
XOR R3
MOV R2      #Xor R2, R2, R3 @b5, b6, b7
ANDI 00000
ADD R9
ANDI 10000
MOV R3      #And R3, R9, 16
SHR R3 100
ANDI 00000
ADD R2
XOR R3
MOV R2      #Xor R2, R2, R3 @b5, b6, b7, b8
ANDI 00000
ADDI 00001
MOV R3
SHL R3 101
ANDI 00000
ADD R9
AND R3
MOV R3      #And R3, R9, 32
SHR R3 101
ANDI 00000
ADD R2
XOR R3
MOV R2      #Xor R2, R2, R3 @b5, b6, b7, b8, b9
ANDI 00000
ADDI 00001
MOV R3
SHL R3 110
ANDI 00000
ADD R9
AND R3
MOV R3      #And R3, R9, 64
SHR R3 110
ANDI 00000
ADD R2
XOR R3
MOV R2      #Xor R2, R2, R3 @b5, b6, b7, b8, b9, b10
ANDI 00000
ADDI 00001
MOV R3
SHL R3 111
ANDI 00000
ADD R9
AND R3
MOV R3      #And R3, R9, 128
SHR R3 111
ANDI 00000
ADD R2
XOR R3
MOV R2      #Xor R2, R2, R3 @calculated parity bit 8
ANDI 00000
ADD R9
ANDI 00001
MOV R3      #And R3, R9, 1 @get parity bit 8
ANDI 00000
ADD R2
XOR R3
MOV R2      #Xor R2, R2, R3
SHL R2 011
ANDI 00000
ADD R5
ADD R2
MOV R5      #Add R5, R5, R2 @Move result into R5
ANDI 00000
ADD R8
ANDI 00010
MOV R2      #And R2, R8, 2	@Parity bit 16
SHR R2 001  #Shift Right R2, 1 @p1
ANDI 00000
ADD R8
ANDI 00100
MOV R3      #And R3, R8, 4
SHR R3 010
ANDI 00000
ADD R2
XOR R3
MOV R2      #Xor R2, R2, R3 @p1, p2
ANDI 00000
ADD R8
ANDI 01000
MOV R3      #And R3, R8, 8
SHR R3 011
ANDI 00000
ADD R2
XOR R3
MOV R2      #Xor R2, R2, R3 @p1, p2, b1
ANDI 00000
ADD R8
ANDI 10000
MOV R3      #And R3, R8, 16
SHR R3 100
ANDI 00000
ADD R2
XOR R3
MOV R2      #Xor R2, R2, R3 @p1, p2, b1, p4
ANDI 00000
ADDI 00001
MOV R3
SHL R3 101
ANDI 00000
ADD R8
AND R3
MOV R3      #And R3, R8, 32
SHR R3 101
ANDI 00000
ADD R2
XOR R3
MOV R2      #Xor R2, R2, R3 @p1, p2, b1, p4, b2
ANDI 00000
ADDI 00001
MOV R3
SHL R3 110
ANDI 00000
ADD R8
AND R3
MOV R3      #And R3, R8, 64
SHR R3 110
ANDI 00000
ADD R2
XOR R3
MOV R2      #Xor R2, R2, R3 @p1, p2, b1, p4, b2, b3
ANDI 00000
ADDI 00001
MOV R3
SHL R3 111
ANDI 00000
ADD R8
AND R3
MOV R3      #And R3, R8, 128
SHR R3 111
ANDI 00000
ADD R2
XOR R3
MOV R2      #Xor R2, R2, R3 @p1, p2, b1, p4, b2, b3, b4
ANDI 00000
ADD R9
ANDI 00001  #gets p8
XOR R2
MOV R2      #Xor R2, R2, R3 @p1, p2, b1, p4, b2, b3, b4, p8
ANDI 00000
ADD R9
ANDI 00010
MOV R3      #And R3, R9, 2
SHR R3 001
ANDI 00000
ADD R2
XOR R3
MOV R2      #Xor R2, R2, R3 @p1, p2, b1, p4, b2, b3, b4, p8, b5
ANDI 00000
ADD R9
ANDI 00100
MOV R3      #And R3, R9, 4
SHR R3 010
ANDI 00000
ADD R2
XOR R3
MOV R2      #Xor R2, R2, R3 @p1, p2, b1, p4, b2, b3, b4, p8, b5, b6
ANDI 00000
ADD R9
ANDI 01000
MOV R3      #And R3, R9, 8
SHR R3 011
ANDI 00000
ADD R2
XOR R3
MOV R2      #Xor R2, R2, R3 @p1, p2, b1, p4, b2, b3, b4, p8, b5, b6, b7
ANDI 00000
ADD R9
ANDI 10000
MOV R3      #And R3, R9, 16
SHR R3 100
ANDI 00000
ADD R2
XOR R3
MOV R2      #Xor R2, R2, R3 @p1, p2, b1, p4, b2, b3, b4, p8, b5, b6, b7, b8
ANDI 00000
ADDI 00001
MOV R3
SHL R3 101
ANDI 00000
ADD R9
AND R3
MOV R3      #And R3, R9, 32
SHR R3 101
ANDI 00000
ADD R2
XOR R3
MOV R2      #Xor R2, R2, R3 @p1, p2, b1, p4, b2, b3, b4, p8, b5, b6, b7, b8, b9
ANDI 00000
ADDI 00001
MOV R3
SHL R3 110
ANDI 00000
ADD R9
AND R3
MOV R3      #And R3, R9, 64
SHR R3 110
ANDI 00000
ADD R2
XOR R3
MOV R2      #Xor R2, R2, R3 @p1, p2, b1, p4, b2, b3, b4, p8, b5, b6, b7, b8, b9, b10
ANDI 00000
ADDI 00001
MOV R3
SHL R3 111
ANDI 00000
ADD R9
AND R3
MOV R3      #And R3, R9, 128
SHR R3 111
ANDI 00000
ADD R2
XOR R3
MOV R2      #Xor R2, R2, R3 @calculated parity bit 16
ANDI 00000
ADD R8
ANDI 00001
MOV R3      #And R3, R8, 1 @gets parity bit 16
ANDI 00000
ADD R2
XOR R3
MOV R2	   #Compare for parity bit 16
SHL R2 100
ANDI 00000
ADD R5
ADD R2
MOV R2      #Add R2, R5, R2	@All parity bits calculated, yes it's supposed to be R2, R5, R2
ANDI 00000
ADDI 01111
MOV R3
CMP R2 R3   #Compare R2, 15 @Value is greater than 15
BRGT 00010  #branch to 2_bit_error
ANDI 00000
ADDI 00111
MOV R3
CMP R2 R3   #Compare R2, 7
BRGT 00011  #branch to upper_byte
ANDI 00000  #Start of lower_byte
ADDI 00001
MOV R3      #set to R3
SHLR R3 R2  #Shift Left R3, R2
ANDI 00000
ADD R8
AND R3
MOV R2      #And R4, R3, R8 @Gets incorrect bit
ANDI 00000
MOV R4
CMP R2 R4   #Compare R2, 0
BRE 00100   #branch to lower_0
J 00101     #jump to lower_1
ANDI 00000  #start of lower_0
ADD R8
ADD R3
MOV R8      #Add R8, R3, R8
J 00110     #jump to decode
ANDI 00000  #start of lower_1
ADD R8
SUB R3
MOV R3      #Sub R8, R8, R3
J 00110     #jump to decode
ANDI 00000  #start of upper_byte
ADDI 01000
MOV R5
ANDI 00000
ADD R2
SUB R5
MOV R2      #Sub R2, R2, 8
ANDI 00000
ADDI 00001
MOV R3      #//Set R3 to 1
SHLR R3 R2   #Shift Left R3, R2
ANDI 00000
ADD R3
AND R9
MOV R2      #And R2, R3, R9
ANDI 00000
MOV R4
CMP R2 R4   #Compare R2, 0
BRE 00111   #branch to upper_0
J   01000   #jump to upper_1
ANDI 00000  # start of upper_0
ADD R9
ADD R3
MOV R9      #Add R9, R3, R9
J 00110     #jump to decode
ANDI 00000  #start of upper_1
ADD R9
SUB R3
MOV R9      #Sub R9, R9, R3
J 00110     #jump to decode
ANDI 00000  #start of 2_bit_error
ADDI 00001
MOV R3
SHL R3 111
ANDI 00000
ADD R3
MOV R7      #Add R7, R7, 1
ANDI 00000  #start of decode
ADDI 00111
MOV R3
SHL R3 101
ANDI 00000
ADD R9
AND R3
MOV R3      #And R3, R9, 0xD0
SHR R3 101
ANDI 00000
ADD R7
ADD R3
MOV R7      #Add R7, R7, R3 @b11-b9
ANDI 00000
ADDI 11110
AND R9
MOV R3      #And R3, R9, 0x1D
SHL R3 011
ANDI 00000
ADD R6
ADD R3
MOV R6      #Add R6, R6, R3 @b8-b5
ANDI 00000
ADDI 00111
MOV R3
SHL R3 101
ANDI 00000
ADD R8
AND R3
MOV R3      #And R3, R8, 0xD0
SHR R3 100
ANDI 00000
ADD R6
ADD R3
MOV R6      #Add R6, R6, R3 @b4-b2
ANDI 00000
ADDI 01000
AND R8
MOV R3      #And R3, R8, 0x08
SHR R3 011
ANDI 00000
ADD R6
ADD R3
MOV R6      #Add R6, R6, R3 @b1
STR R6 R1   #Store R6, [0]R1
ANDI 00000
ADD R1
ADDI 00001
MOV R1
STR R7 R1   #Store R7, [1]R1
ANDI 00000
MOV R2
MOV R3
MOV R4
MOV R5
MOV R6
MOV R7
MOV R8
ANDI 00000
ADD R0
ADDI 00001
MOV R0      #Add R0, R0, 1
ANDI 00000
ADD R1
ADDI 00001
MOV R1      #Add R1, R1, 1
ANDI 00000
ADD R10
MOV R3
CMP R0 R3   #Compare R0, 93
BRGT 01001  #jump to end
J 01010     #jump to beginning of program2 loop
ANDI 00000  #End